#!/usr/bin/env python

"""
Ver: Python3
"""

import requests, re
import urllib.parse
from urllib.parse import urljoin
from bs4 import BeautifulSoup


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_from(self, url):
        """
        extract all links embedded in website

        :param url: website url
        :return: url links on the website
        """
        response = self.session.get(url)
        href_links = re.findall('(?:href=")(.*?)"', response.content.decode(encoding='utf-8', errors="ignore"))
        return href_links
        # return response.content.decode


    def crawl(self, url=None):
        """
        website crawling for finding valid absolute links

        :param url:
        :return: list target_links with valid absolute link within website
        """
        if url == None:
            url = self.target_url
        links = self.extract_links_from(url)
        for link in links:
            # convert relative links to full links
            link = urllib.parse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            # ignore links which are not from a target website and take only unique links
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)


    def extract_forms(self, url):
        """
        find html forms in website

        :param url: website url
        :return: list with html forms
        """
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content.decode(encoding='utf-8', errors="ignore"), features="html.parser")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        """
        submit data to the html form on website

        :param form:
        :param value:
        :param url:
        :return:
        """
        action = form.get("action")
        post_url = urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == "post":
            return requests.post(post_url, data=post_data)
        # send data for GET request
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """
        iterate over each link in target_link list, extract forms from it, test the forms, test the link

        :return: display message if any vulnerability was found
        """

        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print(" Testing form in" + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n XSS discovered in " + link + " in the following form")
                    print(form)

            if "=" in link:
                print(" \n\n Testing " + link)
                if_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("\n\n Discovered XSS in " + link)

    def test_xss_in_form(self, form, url):
        """
        test if form in website has XSS vulnerability
        :param form:
        :param url:
        :return: True = XSS vulnerable
        """
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content.decode(encoding='utf-8', errors="ignore")

    def test_xss_in_link(self, url):
        """
        test if link in website has XSS vulnerability
        :param url:
        :return:
        """
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content.decode(encoding='utf-8', errors="ignore")

